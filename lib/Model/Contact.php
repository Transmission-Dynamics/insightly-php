<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_id' => 'int',
        'salutation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'image_url' => 'string',
        'background' => 'string',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'social_linkedin' => 'string',
        'social_facebook' => 'string',
        'social_twitter' => 'string',
        'date_of_birth' => '\DateTime',
        'phone' => 'string',
        'phone_home' => 'string',
        'phone_mobile' => 'string',
        'phone_other' => 'string',
        'phone_assistant' => 'string',
        'phone_fax' => 'string',
        'email_address' => 'string',
        'assistant_name' => 'string',
        'address_mail_street' => 'string',
        'address_mail_city' => 'string',
        'address_mail_state' => 'string',
        'address_mail_postcode' => 'string',
        'address_mail_country' => 'string',
        'address_other_street' => 'string',
        'address_other_city' => 'string',
        'address_other_state' => 'string',
        'address_other_postcode' => 'string',
        'address_other_country' => 'string',
        'last_activity_date_utc' => '\DateTime',
        'next_activity_date_utc' => '\DateTime',
        'organisation_id' => 'int',
        'title' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]',
        'tags' => '\Swagger\Client\Model\APITag[]',
        'dates' => '\Swagger\Client\Model\APIDate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_id' => 'int64',
        'salutation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'image_url' => 'string',
        'background' => 'string',
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time',
        'social_linkedin' => 'string',
        'social_facebook' => 'string',
        'social_twitter' => 'string',
        'date_of_birth' => 'date-time',
        'phone' => 'string',
        'phone_home' => 'string',
        'phone_mobile' => 'string',
        'phone_other' => 'string',
        'phone_assistant' => 'string',
        'phone_fax' => 'string',
        'email_address' => 'string',
        'assistant_name' => 'string',
        'address_mail_street' => 'string',
        'address_mail_city' => 'string',
        'address_mail_state' => 'string',
        'address_mail_postcode' => 'string',
        'address_mail_country' => 'string',
        'address_other_street' => 'string',
        'address_other_city' => 'string',
        'address_other_state' => 'string',
        'address_other_postcode' => 'string',
        'address_other_country' => 'string',
        'last_activity_date_utc' => 'date-time',
        'next_activity_date_utc' => 'date-time',
        'organisation_id' => 'int64',
        'title' => 'string',
        'customfields' => null,
        'tags' => null,
        'dates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_id' => 'CONTACT_ID',
        'salutation' => 'SALUTATION',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'image_url' => 'IMAGE_URL',
        'background' => 'BACKGROUND',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'social_linkedin' => 'SOCIAL_LINKEDIN',
        'social_facebook' => 'SOCIAL_FACEBOOK',
        'social_twitter' => 'SOCIAL_TWITTER',
        'date_of_birth' => 'DATE_OF_BIRTH',
        'phone' => 'PHONE',
        'phone_home' => 'PHONE_HOME',
        'phone_mobile' => 'PHONE_MOBILE',
        'phone_other' => 'PHONE_OTHER',
        'phone_assistant' => 'PHONE_ASSISTANT',
        'phone_fax' => 'PHONE_FAX',
        'email_address' => 'EMAIL_ADDRESS',
        'assistant_name' => 'ASSISTANT_NAME',
        'address_mail_street' => 'ADDRESS_MAIL_STREET',
        'address_mail_city' => 'ADDRESS_MAIL_CITY',
        'address_mail_state' => 'ADDRESS_MAIL_STATE',
        'address_mail_postcode' => 'ADDRESS_MAIL_POSTCODE',
        'address_mail_country' => 'ADDRESS_MAIL_COUNTRY',
        'address_other_street' => 'ADDRESS_OTHER_STREET',
        'address_other_city' => 'ADDRESS_OTHER_CITY',
        'address_other_state' => 'ADDRESS_OTHER_STATE',
        'address_other_postcode' => 'ADDRESS_OTHER_POSTCODE',
        'address_other_country' => 'ADDRESS_OTHER_COUNTRY',
        'last_activity_date_utc' => 'LAST_ACTIVITY_DATE_UTC',
        'next_activity_date_utc' => 'NEXT_ACTIVITY_DATE_UTC',
        'organisation_id' => 'ORGANISATION_ID',
        'title' => 'TITLE',
        'customfields' => 'CUSTOMFIELDS',
        'tags' => 'TAGS',
        'dates' => 'DATES'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_id' => 'setContactId',
        'salutation' => 'setSalutation',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'image_url' => 'setImageUrl',
        'background' => 'setBackground',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'social_linkedin' => 'setSocialLinkedin',
        'social_facebook' => 'setSocialFacebook',
        'social_twitter' => 'setSocialTwitter',
        'date_of_birth' => 'setDateOfBirth',
        'phone' => 'setPhone',
        'phone_home' => 'setPhoneHome',
        'phone_mobile' => 'setPhoneMobile',
        'phone_other' => 'setPhoneOther',
        'phone_assistant' => 'setPhoneAssistant',
        'phone_fax' => 'setPhoneFax',
        'email_address' => 'setEmailAddress',
        'assistant_name' => 'setAssistantName',
        'address_mail_street' => 'setAddressMailStreet',
        'address_mail_city' => 'setAddressMailCity',
        'address_mail_state' => 'setAddressMailState',
        'address_mail_postcode' => 'setAddressMailPostcode',
        'address_mail_country' => 'setAddressMailCountry',
        'address_other_street' => 'setAddressOtherStreet',
        'address_other_city' => 'setAddressOtherCity',
        'address_other_state' => 'setAddressOtherState',
        'address_other_postcode' => 'setAddressOtherPostcode',
        'address_other_country' => 'setAddressOtherCountry',
        'last_activity_date_utc' => 'setLastActivityDateUtc',
        'next_activity_date_utc' => 'setNextActivityDateUtc',
        'organisation_id' => 'setOrganisationId',
        'title' => 'setTitle',
        'customfields' => 'setCustomfields',
        'tags' => 'setTags',
        'dates' => 'setDates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_id' => 'getContactId',
        'salutation' => 'getSalutation',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'image_url' => 'getImageUrl',
        'background' => 'getBackground',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'social_linkedin' => 'getSocialLinkedin',
        'social_facebook' => 'getSocialFacebook',
        'social_twitter' => 'getSocialTwitter',
        'date_of_birth' => 'getDateOfBirth',
        'phone' => 'getPhone',
        'phone_home' => 'getPhoneHome',
        'phone_mobile' => 'getPhoneMobile',
        'phone_other' => 'getPhoneOther',
        'phone_assistant' => 'getPhoneAssistant',
        'phone_fax' => 'getPhoneFax',
        'email_address' => 'getEmailAddress',
        'assistant_name' => 'getAssistantName',
        'address_mail_street' => 'getAddressMailStreet',
        'address_mail_city' => 'getAddressMailCity',
        'address_mail_state' => 'getAddressMailState',
        'address_mail_postcode' => 'getAddressMailPostcode',
        'address_mail_country' => 'getAddressMailCountry',
        'address_other_street' => 'getAddressOtherStreet',
        'address_other_city' => 'getAddressOtherCity',
        'address_other_state' => 'getAddressOtherState',
        'address_other_postcode' => 'getAddressOtherPostcode',
        'address_other_country' => 'getAddressOtherCountry',
        'last_activity_date_utc' => 'getLastActivityDateUtc',
        'next_activity_date_utc' => 'getNextActivityDateUtc',
        'organisation_id' => 'getOrganisationId',
        'title' => 'getTitle',
        'customfields' => 'getCustomfields',
        'tags' => 'getTags',
        'dates' => 'getDates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['social_linkedin'] = isset($data['social_linkedin']) ? $data['social_linkedin'] : null;
        $this->container['social_facebook'] = isset($data['social_facebook']) ? $data['social_facebook'] : null;
        $this->container['social_twitter'] = isset($data['social_twitter']) ? $data['social_twitter'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_home'] = isset($data['phone_home']) ? $data['phone_home'] : null;
        $this->container['phone_mobile'] = isset($data['phone_mobile']) ? $data['phone_mobile'] : null;
        $this->container['phone_other'] = isset($data['phone_other']) ? $data['phone_other'] : null;
        $this->container['phone_assistant'] = isset($data['phone_assistant']) ? $data['phone_assistant'] : null;
        $this->container['phone_fax'] = isset($data['phone_fax']) ? $data['phone_fax'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['assistant_name'] = isset($data['assistant_name']) ? $data['assistant_name'] : null;
        $this->container['address_mail_street'] = isset($data['address_mail_street']) ? $data['address_mail_street'] : null;
        $this->container['address_mail_city'] = isset($data['address_mail_city']) ? $data['address_mail_city'] : null;
        $this->container['address_mail_state'] = isset($data['address_mail_state']) ? $data['address_mail_state'] : null;
        $this->container['address_mail_postcode'] = isset($data['address_mail_postcode']) ? $data['address_mail_postcode'] : null;
        $this->container['address_mail_country'] = isset($data['address_mail_country']) ? $data['address_mail_country'] : null;
        $this->container['address_other_street'] = isset($data['address_other_street']) ? $data['address_other_street'] : null;
        $this->container['address_other_city'] = isset($data['address_other_city']) ? $data['address_other_city'] : null;
        $this->container['address_other_state'] = isset($data['address_other_state']) ? $data['address_other_state'] : null;
        $this->container['address_other_postcode'] = isset($data['address_other_postcode']) ? $data['address_other_postcode'] : null;
        $this->container['address_other_country'] = isset($data['address_other_country']) ? $data['address_other_country'] : null;
        $this->container['last_activity_date_utc'] = isset($data['last_activity_date_utc']) ? $data['last_activity_date_utc'] : null;
        $this->container['next_activity_date_utc'] = isset($data['next_activity_date_utc']) ? $data['next_activity_date_utc'] : null;
        $this->container['organisation_id'] = isset($data['organisation_id']) ? $data['organisation_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) > 50)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['background']) && (strlen($this->container['background']) > 4000)) {
            $invalidProperties[] = "invalid value for 'background', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['social_linkedin']) && (strlen($this->container['social_linkedin']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_linkedin', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_facebook']) && (strlen($this->container['social_facebook']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_facebook', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_twitter']) && (strlen($this->container['social_twitter']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_twitter', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_home']) && (strlen($this->container['phone_home']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_home', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_mobile']) && (strlen($this->container['phone_mobile']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_mobile', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_other']) && (strlen($this->container['phone_other']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_other', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_assistant']) && (strlen($this->container['phone_assistant']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_assistant', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_fax']) && (strlen($this->container['phone_fax']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_fax', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_address']) && (strlen($this->container['email_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['assistant_name']) && (strlen($this->container['assistant_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'assistant_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_mail_street']) && (strlen($this->container['address_mail_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_mail_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_mail_city']) && (strlen($this->container['address_mail_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_mail_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_mail_state']) && (strlen($this->container['address_mail_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_mail_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_mail_postcode']) && (strlen($this->container['address_mail_postcode']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_mail_postcode', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['address_mail_country']) && (strlen($this->container['address_mail_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_mail_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_other_street']) && (strlen($this->container['address_other_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_other_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_other_city']) && (strlen($this->container['address_other_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_other_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_other_state']) && (strlen($this->container['address_other_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_other_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_other_postcode']) && (strlen($this->container['address_other_postcode']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_other_postcode', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['address_other_country']) && (strlen($this->container['address_other_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_other_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['salutation']) > 50) {
            return false;
        }
        if ($this->container['first_name'] === null) {
            return false;
        }
        if (strlen($this->container['first_name']) > 255) {
            return false;
        }
        if (strlen($this->container['last_name']) > 255) {
            return false;
        }
        if (strlen($this->container['image_url']) > 255) {
            return false;
        }
        if (strlen($this->container['background']) > 4000) {
            return false;
        }
        if (strlen($this->container['social_linkedin']) > 255) {
            return false;
        }
        if (strlen($this->container['social_facebook']) > 255) {
            return false;
        }
        if (strlen($this->container['social_twitter']) > 255) {
            return false;
        }
        if (strlen($this->container['phone']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_home']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_mobile']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_other']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_assistant']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_fax']) > 255) {
            return false;
        }
        if (strlen($this->container['email_address']) > 255) {
            return false;
        }
        if (strlen($this->container['assistant_name']) > 255) {
            return false;
        }
        if (strlen($this->container['address_mail_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_mail_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_mail_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_mail_postcode']) > 128) {
            return false;
        }
        if (strlen($this->container['address_mail_country']) > 255) {
            return false;
        }
        if (strlen($this->container['address_other_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_other_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_other_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_other_postcode']) > 128) {
            return false;
        }
        if (strlen($this->container['address_other_country']) > 255) {
            return false;
        }
        if (strlen($this->container['title']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        if (!is_null($salutation) && (strlen($salutation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling Contact., must be smaller than or equal to 50.');
        }

        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (strlen($image_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background background
     *
     * @return $this
     */
    public function setBackground($background)
    {
        if (!is_null($background) && (strlen($background) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $background when calling Contact., must be smaller than or equal to 4000.');
        }

        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets social_linkedin
     *
     * @return string
     */
    public function getSocialLinkedin()
    {
        return $this->container['social_linkedin'];
    }

    /**
     * Sets social_linkedin
     *
     * @param string $social_linkedin social_linkedin
     *
     * @return $this
     */
    public function setSocialLinkedin($social_linkedin)
    {
        if (!is_null($social_linkedin) && (strlen($social_linkedin) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_linkedin when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['social_linkedin'] = $social_linkedin;

        return $this;
    }

    /**
     * Gets social_facebook
     *
     * @return string
     */
    public function getSocialFacebook()
    {
        return $this->container['social_facebook'];
    }

    /**
     * Sets social_facebook
     *
     * @param string $social_facebook social_facebook
     *
     * @return $this
     */
    public function setSocialFacebook($social_facebook)
    {
        if (!is_null($social_facebook) && (strlen($social_facebook) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_facebook when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['social_facebook'] = $social_facebook;

        return $this;
    }

    /**
     * Gets social_twitter
     *
     * @return string
     */
    public function getSocialTwitter()
    {
        return $this->container['social_twitter'];
    }

    /**
     * Sets social_twitter
     *
     * @param string $social_twitter social_twitter
     *
     * @return $this
     */
    public function setSocialTwitter($social_twitter)
    {
        if (!is_null($social_twitter) && (strlen($social_twitter) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_twitter when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['social_twitter'] = $social_twitter;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_home
     *
     * @return string
     */
    public function getPhoneHome()
    {
        return $this->container['phone_home'];
    }

    /**
     * Sets phone_home
     *
     * @param string $phone_home phone_home
     *
     * @return $this
     */
    public function setPhoneHome($phone_home)
    {
        if (!is_null($phone_home) && (strlen($phone_home) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_home when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone_home'] = $phone_home;

        return $this;
    }

    /**
     * Gets phone_mobile
     *
     * @return string
     */
    public function getPhoneMobile()
    {
        return $this->container['phone_mobile'];
    }

    /**
     * Sets phone_mobile
     *
     * @param string $phone_mobile phone_mobile
     *
     * @return $this
     */
    public function setPhoneMobile($phone_mobile)
    {
        if (!is_null($phone_mobile) && (strlen($phone_mobile) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_mobile when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone_mobile'] = $phone_mobile;

        return $this;
    }

    /**
     * Gets phone_other
     *
     * @return string
     */
    public function getPhoneOther()
    {
        return $this->container['phone_other'];
    }

    /**
     * Sets phone_other
     *
     * @param string $phone_other phone_other
     *
     * @return $this
     */
    public function setPhoneOther($phone_other)
    {
        if (!is_null($phone_other) && (strlen($phone_other) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_other when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone_other'] = $phone_other;

        return $this;
    }

    /**
     * Gets phone_assistant
     *
     * @return string
     */
    public function getPhoneAssistant()
    {
        return $this->container['phone_assistant'];
    }

    /**
     * Sets phone_assistant
     *
     * @param string $phone_assistant phone_assistant
     *
     * @return $this
     */
    public function setPhoneAssistant($phone_assistant)
    {
        if (!is_null($phone_assistant) && (strlen($phone_assistant) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_assistant when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone_assistant'] = $phone_assistant;

        return $this;
    }

    /**
     * Gets phone_fax
     *
     * @return string
     */
    public function getPhoneFax()
    {
        return $this->container['phone_fax'];
    }

    /**
     * Sets phone_fax
     *
     * @param string $phone_fax phone_fax
     *
     * @return $this
     */
    public function setPhoneFax($phone_fax)
    {
        if (!is_null($phone_fax) && (strlen($phone_fax) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_fax when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['phone_fax'] = $phone_fax;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (strlen($email_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets assistant_name
     *
     * @return string
     */
    public function getAssistantName()
    {
        return $this->container['assistant_name'];
    }

    /**
     * Sets assistant_name
     *
     * @param string $assistant_name assistant_name
     *
     * @return $this
     */
    public function setAssistantName($assistant_name)
    {
        if (!is_null($assistant_name) && (strlen($assistant_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $assistant_name when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['assistant_name'] = $assistant_name;

        return $this;
    }

    /**
     * Gets address_mail_street
     *
     * @return string
     */
    public function getAddressMailStreet()
    {
        return $this->container['address_mail_street'];
    }

    /**
     * Sets address_mail_street
     *
     * @param string $address_mail_street address_mail_street
     *
     * @return $this
     */
    public function setAddressMailStreet($address_mail_street)
    {
        if (!is_null($address_mail_street) && (strlen($address_mail_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_mail_street when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_mail_street'] = $address_mail_street;

        return $this;
    }

    /**
     * Gets address_mail_city
     *
     * @return string
     */
    public function getAddressMailCity()
    {
        return $this->container['address_mail_city'];
    }

    /**
     * Sets address_mail_city
     *
     * @param string $address_mail_city address_mail_city
     *
     * @return $this
     */
    public function setAddressMailCity($address_mail_city)
    {
        if (!is_null($address_mail_city) && (strlen($address_mail_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_mail_city when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_mail_city'] = $address_mail_city;

        return $this;
    }

    /**
     * Gets address_mail_state
     *
     * @return string
     */
    public function getAddressMailState()
    {
        return $this->container['address_mail_state'];
    }

    /**
     * Sets address_mail_state
     *
     * @param string $address_mail_state address_mail_state
     *
     * @return $this
     */
    public function setAddressMailState($address_mail_state)
    {
        if (!is_null($address_mail_state) && (strlen($address_mail_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_mail_state when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_mail_state'] = $address_mail_state;

        return $this;
    }

    /**
     * Gets address_mail_postcode
     *
     * @return string
     */
    public function getAddressMailPostcode()
    {
        return $this->container['address_mail_postcode'];
    }

    /**
     * Sets address_mail_postcode
     *
     * @param string $address_mail_postcode address_mail_postcode
     *
     * @return $this
     */
    public function setAddressMailPostcode($address_mail_postcode)
    {
        if (!is_null($address_mail_postcode) && (strlen($address_mail_postcode) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_mail_postcode when calling Contact., must be smaller than or equal to 128.');
        }

        $this->container['address_mail_postcode'] = $address_mail_postcode;

        return $this;
    }

    /**
     * Gets address_mail_country
     *
     * @return string
     */
    public function getAddressMailCountry()
    {
        return $this->container['address_mail_country'];
    }

    /**
     * Sets address_mail_country
     *
     * @param string $address_mail_country address_mail_country
     *
     * @return $this
     */
    public function setAddressMailCountry($address_mail_country)
    {
        if (!is_null($address_mail_country) && (strlen($address_mail_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_mail_country when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_mail_country'] = $address_mail_country;

        return $this;
    }

    /**
     * Gets address_other_street
     *
     * @return string
     */
    public function getAddressOtherStreet()
    {
        return $this->container['address_other_street'];
    }

    /**
     * Sets address_other_street
     *
     * @param string $address_other_street address_other_street
     *
     * @return $this
     */
    public function setAddressOtherStreet($address_other_street)
    {
        if (!is_null($address_other_street) && (strlen($address_other_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_other_street when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_other_street'] = $address_other_street;

        return $this;
    }

    /**
     * Gets address_other_city
     *
     * @return string
     */
    public function getAddressOtherCity()
    {
        return $this->container['address_other_city'];
    }

    /**
     * Sets address_other_city
     *
     * @param string $address_other_city address_other_city
     *
     * @return $this
     */
    public function setAddressOtherCity($address_other_city)
    {
        if (!is_null($address_other_city) && (strlen($address_other_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_other_city when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_other_city'] = $address_other_city;

        return $this;
    }

    /**
     * Gets address_other_state
     *
     * @return string
     */
    public function getAddressOtherState()
    {
        return $this->container['address_other_state'];
    }

    /**
     * Sets address_other_state
     *
     * @param string $address_other_state address_other_state
     *
     * @return $this
     */
    public function setAddressOtherState($address_other_state)
    {
        if (!is_null($address_other_state) && (strlen($address_other_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_other_state when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_other_state'] = $address_other_state;

        return $this;
    }

    /**
     * Gets address_other_postcode
     *
     * @return string
     */
    public function getAddressOtherPostcode()
    {
        return $this->container['address_other_postcode'];
    }

    /**
     * Sets address_other_postcode
     *
     * @param string $address_other_postcode address_other_postcode
     *
     * @return $this
     */
    public function setAddressOtherPostcode($address_other_postcode)
    {
        if (!is_null($address_other_postcode) && (strlen($address_other_postcode) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_other_postcode when calling Contact., must be smaller than or equal to 128.');
        }

        $this->container['address_other_postcode'] = $address_other_postcode;

        return $this;
    }

    /**
     * Gets address_other_country
     *
     * @return string
     */
    public function getAddressOtherCountry()
    {
        return $this->container['address_other_country'];
    }

    /**
     * Sets address_other_country
     *
     * @param string $address_other_country address_other_country
     *
     * @return $this
     */
    public function setAddressOtherCountry($address_other_country)
    {
        if (!is_null($address_other_country) && (strlen($address_other_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_other_country when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['address_other_country'] = $address_other_country;

        return $this;
    }

    /**
     * Gets last_activity_date_utc
     *
     * @return \DateTime
     */
    public function getLastActivityDateUtc()
    {
        return $this->container['last_activity_date_utc'];
    }

    /**
     * Sets last_activity_date_utc
     *
     * @param \DateTime $last_activity_date_utc last_activity_date_utc
     *
     * @return $this
     */
    public function setLastActivityDateUtc($last_activity_date_utc)
    {
        $this->container['last_activity_date_utc'] = $last_activity_date_utc;

        return $this;
    }

    /**
     * Gets next_activity_date_utc
     *
     * @return \DateTime
     */
    public function getNextActivityDateUtc()
    {
        return $this->container['next_activity_date_utc'];
    }

    /**
     * Sets next_activity_date_utc
     *
     * @param \DateTime $next_activity_date_utc next_activity_date_utc
     *
     * @return $this
     */
    public function setNextActivityDateUtc($next_activity_date_utc)
    {
        $this->container['next_activity_date_utc'] = $next_activity_date_utc;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return int
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param int $organisation_id organisation_id
     *
     * @return $this
     */
    public function setOrganisationId($organisation_id)
    {
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \Swagger\Client\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\APITag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \Swagger\Client\Model\APIDate[]
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \Swagger\Client\Model\APIDate[] $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
