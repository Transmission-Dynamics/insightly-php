<?php
/**
 * Organisation2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Organisation2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Organisation2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Organisation_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organisation_id' => 'int',
        'organisation_name' => 'string',
        'background' => 'string',
        'image_url' => 'string',
        'owner_user_id' => 'int',
        'phone' => 'string',
        'phone_fax' => 'string',
        'website' => 'string',
        'address_billing_street' => 'string',
        'address_billing_city' => 'string',
        'address_billing_state' => 'string',
        'address_billing_country' => 'string',
        'address_billing_postcode' => 'string',
        'address_ship_street' => 'string',
        'address_ship_city' => 'string',
        'address_ship_state' => 'string',
        'address_ship_postcode' => 'string',
        'address_ship_country' => 'string',
        'social_linkedin' => 'string',
        'social_facebook' => 'string',
        'social_twitter' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organisation_id' => 'int64',
        'organisation_name' => 'string',
        'background' => 'string',
        'image_url' => 'string',
        'owner_user_id' => 'int32',
        'phone' => 'string',
        'phone_fax' => 'string',
        'website' => 'string',
        'address_billing_street' => 'string',
        'address_billing_city' => 'string',
        'address_billing_state' => 'string',
        'address_billing_country' => 'string',
        'address_billing_postcode' => 'string',
        'address_ship_street' => 'string',
        'address_ship_city' => 'string',
        'address_ship_state' => 'string',
        'address_ship_postcode' => 'string',
        'address_ship_country' => 'string',
        'social_linkedin' => 'string',
        'social_facebook' => 'string',
        'social_twitter' => 'string',
        'customfields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organisation_id' => 'ORGANISATION_ID',
        'organisation_name' => 'ORGANISATION_NAME',
        'background' => 'BACKGROUND',
        'image_url' => 'IMAGE_URL',
        'owner_user_id' => 'OWNER_USER_ID',
        'phone' => 'PHONE',
        'phone_fax' => 'PHONE_FAX',
        'website' => 'WEBSITE',
        'address_billing_street' => 'ADDRESS_BILLING_STREET',
        'address_billing_city' => 'ADDRESS_BILLING_CITY',
        'address_billing_state' => 'ADDRESS_BILLING_STATE',
        'address_billing_country' => 'ADDRESS_BILLING_COUNTRY',
        'address_billing_postcode' => 'ADDRESS_BILLING_POSTCODE',
        'address_ship_street' => 'ADDRESS_SHIP_STREET',
        'address_ship_city' => 'ADDRESS_SHIP_CITY',
        'address_ship_state' => 'ADDRESS_SHIP_STATE',
        'address_ship_postcode' => 'ADDRESS_SHIP_POSTCODE',
        'address_ship_country' => 'ADDRESS_SHIP_COUNTRY',
        'social_linkedin' => 'SOCIAL_LINKEDIN',
        'social_facebook' => 'SOCIAL_FACEBOOK',
        'social_twitter' => 'SOCIAL_TWITTER',
        'customfields' => 'CUSTOMFIELDS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organisation_id' => 'setOrganisationId',
        'organisation_name' => 'setOrganisationName',
        'background' => 'setBackground',
        'image_url' => 'setImageUrl',
        'owner_user_id' => 'setOwnerUserId',
        'phone' => 'setPhone',
        'phone_fax' => 'setPhoneFax',
        'website' => 'setWebsite',
        'address_billing_street' => 'setAddressBillingStreet',
        'address_billing_city' => 'setAddressBillingCity',
        'address_billing_state' => 'setAddressBillingState',
        'address_billing_country' => 'setAddressBillingCountry',
        'address_billing_postcode' => 'setAddressBillingPostcode',
        'address_ship_street' => 'setAddressShipStreet',
        'address_ship_city' => 'setAddressShipCity',
        'address_ship_state' => 'setAddressShipState',
        'address_ship_postcode' => 'setAddressShipPostcode',
        'address_ship_country' => 'setAddressShipCountry',
        'social_linkedin' => 'setSocialLinkedin',
        'social_facebook' => 'setSocialFacebook',
        'social_twitter' => 'setSocialTwitter',
        'customfields' => 'setCustomfields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organisation_id' => 'getOrganisationId',
        'organisation_name' => 'getOrganisationName',
        'background' => 'getBackground',
        'image_url' => 'getImageUrl',
        'owner_user_id' => 'getOwnerUserId',
        'phone' => 'getPhone',
        'phone_fax' => 'getPhoneFax',
        'website' => 'getWebsite',
        'address_billing_street' => 'getAddressBillingStreet',
        'address_billing_city' => 'getAddressBillingCity',
        'address_billing_state' => 'getAddressBillingState',
        'address_billing_country' => 'getAddressBillingCountry',
        'address_billing_postcode' => 'getAddressBillingPostcode',
        'address_ship_street' => 'getAddressShipStreet',
        'address_ship_city' => 'getAddressShipCity',
        'address_ship_state' => 'getAddressShipState',
        'address_ship_postcode' => 'getAddressShipPostcode',
        'address_ship_country' => 'getAddressShipCountry',
        'social_linkedin' => 'getSocialLinkedin',
        'social_facebook' => 'getSocialFacebook',
        'social_twitter' => 'getSocialTwitter',
        'customfields' => 'getCustomfields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organisation_id'] = isset($data['organisation_id']) ? $data['organisation_id'] : null;
        $this->container['organisation_name'] = isset($data['organisation_name']) ? $data['organisation_name'] : null;
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_fax'] = isset($data['phone_fax']) ? $data['phone_fax'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['address_billing_street'] = isset($data['address_billing_street']) ? $data['address_billing_street'] : null;
        $this->container['address_billing_city'] = isset($data['address_billing_city']) ? $data['address_billing_city'] : null;
        $this->container['address_billing_state'] = isset($data['address_billing_state']) ? $data['address_billing_state'] : null;
        $this->container['address_billing_country'] = isset($data['address_billing_country']) ? $data['address_billing_country'] : null;
        $this->container['address_billing_postcode'] = isset($data['address_billing_postcode']) ? $data['address_billing_postcode'] : null;
        $this->container['address_ship_street'] = isset($data['address_ship_street']) ? $data['address_ship_street'] : null;
        $this->container['address_ship_city'] = isset($data['address_ship_city']) ? $data['address_ship_city'] : null;
        $this->container['address_ship_state'] = isset($data['address_ship_state']) ? $data['address_ship_state'] : null;
        $this->container['address_ship_postcode'] = isset($data['address_ship_postcode']) ? $data['address_ship_postcode'] : null;
        $this->container['address_ship_country'] = isset($data['address_ship_country']) ? $data['address_ship_country'] : null;
        $this->container['social_linkedin'] = isset($data['social_linkedin']) ? $data['social_linkedin'] : null;
        $this->container['social_facebook'] = isset($data['social_facebook']) ? $data['social_facebook'] : null;
        $this->container['social_twitter'] = isset($data['social_twitter']) ? $data['social_twitter'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['organisation_name'] === null) {
            $invalidProperties[] = "'organisation_name' can't be null";
        }
        if ((strlen($this->container['organisation_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'organisation_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['background']) && (strlen($this->container['background']) > 4000)) {
            $invalidProperties[] = "invalid value for 'background', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) > 500)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['phone']) && (strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_fax']) && (strlen($this->container['phone_fax']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_fax', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_billing_street']) && (strlen($this->container['address_billing_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_billing_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_billing_city']) && (strlen($this->container['address_billing_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_billing_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_billing_state']) && (strlen($this->container['address_billing_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_billing_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_billing_country']) && (strlen($this->container['address_billing_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_billing_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_billing_postcode']) && (strlen($this->container['address_billing_postcode']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_billing_postcode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_ship_street']) && (strlen($this->container['address_ship_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_ship_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_ship_city']) && (strlen($this->container['address_ship_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_ship_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_ship_state']) && (strlen($this->container['address_ship_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_ship_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_ship_postcode']) && (strlen($this->container['address_ship_postcode']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_ship_postcode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_ship_country']) && (strlen($this->container['address_ship_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_ship_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_linkedin']) && (strlen($this->container['social_linkedin']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_linkedin', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_facebook']) && (strlen($this->container['social_facebook']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_facebook', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_twitter']) && (strlen($this->container['social_twitter']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_twitter', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['organisation_id'] === null) {
            return false;
        }
        if ($this->container['organisation_name'] === null) {
            return false;
        }
        if (strlen($this->container['organisation_name']) > 255) {
            return false;
        }
        if (strlen($this->container['background']) > 4000) {
            return false;
        }
        if (strlen($this->container['image_url']) > 500) {
            return false;
        }
        if (strlen($this->container['phone']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_fax']) > 255) {
            return false;
        }
        if (strlen($this->container['website']) > 255) {
            return false;
        }
        if (strlen($this->container['address_billing_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_billing_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_billing_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_billing_country']) > 255) {
            return false;
        }
        if (strlen($this->container['address_billing_postcode']) > 255) {
            return false;
        }
        if (strlen($this->container['address_ship_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_ship_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_ship_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_ship_postcode']) > 255) {
            return false;
        }
        if (strlen($this->container['address_ship_country']) > 255) {
            return false;
        }
        if (strlen($this->container['social_linkedin']) > 255) {
            return false;
        }
        if (strlen($this->container['social_facebook']) > 255) {
            return false;
        }
        if (strlen($this->container['social_twitter']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets organisation_id
     *
     * @return int
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param int $organisation_id organisation_id
     *
     * @return $this
     */
    public function setOrganisationId($organisation_id)
    {
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets organisation_name
     *
     * @return string
     */
    public function getOrganisationName()
    {
        return $this->container['organisation_name'];
    }

    /**
     * Sets organisation_name
     *
     * @param string $organisation_name organisation_name
     *
     * @return $this
     */
    public function setOrganisationName($organisation_name)
    {
        if ((strlen($organisation_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $organisation_name when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['organisation_name'] = $organisation_name;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background background
     *
     * @return $this
     */
    public function setBackground($background)
    {
        if (!is_null($background) && (strlen($background) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $background when calling Organisation2., must be smaller than or equal to 4000.');
        }

        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (strlen($image_url) > 500)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling Organisation2., must be smaller than or equal to 500.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_fax
     *
     * @return string
     */
    public function getPhoneFax()
    {
        return $this->container['phone_fax'];
    }

    /**
     * Sets phone_fax
     *
     * @param string $phone_fax phone_fax
     *
     * @return $this
     */
    public function setPhoneFax($phone_fax)
    {
        if (!is_null($phone_fax) && (strlen($phone_fax) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_fax when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['phone_fax'] = $phone_fax;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets address_billing_street
     *
     * @return string
     */
    public function getAddressBillingStreet()
    {
        return $this->container['address_billing_street'];
    }

    /**
     * Sets address_billing_street
     *
     * @param string $address_billing_street address_billing_street
     *
     * @return $this
     */
    public function setAddressBillingStreet($address_billing_street)
    {
        if (!is_null($address_billing_street) && (strlen($address_billing_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_billing_street when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_billing_street'] = $address_billing_street;

        return $this;
    }

    /**
     * Gets address_billing_city
     *
     * @return string
     */
    public function getAddressBillingCity()
    {
        return $this->container['address_billing_city'];
    }

    /**
     * Sets address_billing_city
     *
     * @param string $address_billing_city address_billing_city
     *
     * @return $this
     */
    public function setAddressBillingCity($address_billing_city)
    {
        if (!is_null($address_billing_city) && (strlen($address_billing_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_billing_city when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_billing_city'] = $address_billing_city;

        return $this;
    }

    /**
     * Gets address_billing_state
     *
     * @return string
     */
    public function getAddressBillingState()
    {
        return $this->container['address_billing_state'];
    }

    /**
     * Sets address_billing_state
     *
     * @param string $address_billing_state address_billing_state
     *
     * @return $this
     */
    public function setAddressBillingState($address_billing_state)
    {
        if (!is_null($address_billing_state) && (strlen($address_billing_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_billing_state when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_billing_state'] = $address_billing_state;

        return $this;
    }

    /**
     * Gets address_billing_country
     *
     * @return string
     */
    public function getAddressBillingCountry()
    {
        return $this->container['address_billing_country'];
    }

    /**
     * Sets address_billing_country
     *
     * @param string $address_billing_country address_billing_country
     *
     * @return $this
     */
    public function setAddressBillingCountry($address_billing_country)
    {
        if (!is_null($address_billing_country) && (strlen($address_billing_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_billing_country when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_billing_country'] = $address_billing_country;

        return $this;
    }

    /**
     * Gets address_billing_postcode
     *
     * @return string
     */
    public function getAddressBillingPostcode()
    {
        return $this->container['address_billing_postcode'];
    }

    /**
     * Sets address_billing_postcode
     *
     * @param string $address_billing_postcode address_billing_postcode
     *
     * @return $this
     */
    public function setAddressBillingPostcode($address_billing_postcode)
    {
        if (!is_null($address_billing_postcode) && (strlen($address_billing_postcode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_billing_postcode when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_billing_postcode'] = $address_billing_postcode;

        return $this;
    }

    /**
     * Gets address_ship_street
     *
     * @return string
     */
    public function getAddressShipStreet()
    {
        return $this->container['address_ship_street'];
    }

    /**
     * Sets address_ship_street
     *
     * @param string $address_ship_street address_ship_street
     *
     * @return $this
     */
    public function setAddressShipStreet($address_ship_street)
    {
        if (!is_null($address_ship_street) && (strlen($address_ship_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_ship_street when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_ship_street'] = $address_ship_street;

        return $this;
    }

    /**
     * Gets address_ship_city
     *
     * @return string
     */
    public function getAddressShipCity()
    {
        return $this->container['address_ship_city'];
    }

    /**
     * Sets address_ship_city
     *
     * @param string $address_ship_city address_ship_city
     *
     * @return $this
     */
    public function setAddressShipCity($address_ship_city)
    {
        if (!is_null($address_ship_city) && (strlen($address_ship_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_ship_city when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_ship_city'] = $address_ship_city;

        return $this;
    }

    /**
     * Gets address_ship_state
     *
     * @return string
     */
    public function getAddressShipState()
    {
        return $this->container['address_ship_state'];
    }

    /**
     * Sets address_ship_state
     *
     * @param string $address_ship_state address_ship_state
     *
     * @return $this
     */
    public function setAddressShipState($address_ship_state)
    {
        if (!is_null($address_ship_state) && (strlen($address_ship_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_ship_state when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_ship_state'] = $address_ship_state;

        return $this;
    }

    /**
     * Gets address_ship_postcode
     *
     * @return string
     */
    public function getAddressShipPostcode()
    {
        return $this->container['address_ship_postcode'];
    }

    /**
     * Sets address_ship_postcode
     *
     * @param string $address_ship_postcode address_ship_postcode
     *
     * @return $this
     */
    public function setAddressShipPostcode($address_ship_postcode)
    {
        if (!is_null($address_ship_postcode) && (strlen($address_ship_postcode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_ship_postcode when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_ship_postcode'] = $address_ship_postcode;

        return $this;
    }

    /**
     * Gets address_ship_country
     *
     * @return string
     */
    public function getAddressShipCountry()
    {
        return $this->container['address_ship_country'];
    }

    /**
     * Sets address_ship_country
     *
     * @param string $address_ship_country address_ship_country
     *
     * @return $this
     */
    public function setAddressShipCountry($address_ship_country)
    {
        if (!is_null($address_ship_country) && (strlen($address_ship_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_ship_country when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['address_ship_country'] = $address_ship_country;

        return $this;
    }

    /**
     * Gets social_linkedin
     *
     * @return string
     */
    public function getSocialLinkedin()
    {
        return $this->container['social_linkedin'];
    }

    /**
     * Sets social_linkedin
     *
     * @param string $social_linkedin social_linkedin
     *
     * @return $this
     */
    public function setSocialLinkedin($social_linkedin)
    {
        if (!is_null($social_linkedin) && (strlen($social_linkedin) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_linkedin when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['social_linkedin'] = $social_linkedin;

        return $this;
    }

    /**
     * Gets social_facebook
     *
     * @return string
     */
    public function getSocialFacebook()
    {
        return $this->container['social_facebook'];
    }

    /**
     * Sets social_facebook
     *
     * @param string $social_facebook social_facebook
     *
     * @return $this
     */
    public function setSocialFacebook($social_facebook)
    {
        if (!is_null($social_facebook) && (strlen($social_facebook) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_facebook when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['social_facebook'] = $social_facebook;

        return $this;
    }

    /**
     * Gets social_twitter
     *
     * @return string
     */
    public function getSocialTwitter()
    {
        return $this->container['social_twitter'];
    }

    /**
     * Sets social_twitter
     *
     * @param string $social_twitter social_twitter
     *
     * @return $this
     */
    public function setSocialTwitter($social_twitter)
    {
        if (!is_null($social_twitter) && (strlen($social_twitter) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_twitter when calling Organisation2., must be smaller than or equal to 255.');
        }

        $this->container['social_twitter'] = $social_twitter;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \Swagger\Client\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
