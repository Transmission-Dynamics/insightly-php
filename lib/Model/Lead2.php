<?php
/**
 * Lead2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Lead2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Lead2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Lead_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lead_id' => 'int',
        'salutation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'lead_source_id' => 'int',
        'lead_status_id' => 'int',
        'title' => 'string',
        'email' => 'string',
        'employee_count' => 'int',
        'fax' => 'string',
        'industry' => 'string',
        'lead_description' => 'string',
        'lead_rating' => 'int',
        'mobile' => 'string',
        'owner_user_id' => 'int',
        'phone' => 'string',
        'responsible_user_id' => 'int',
        'website' => 'string',
        'address_street' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postcode' => 'string',
        'address_country' => 'string',
        'organisation_name' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lead_id' => 'int64',
        'salutation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'lead_source_id' => 'int64',
        'lead_status_id' => 'int64',
        'title' => 'string',
        'email' => 'string',
        'employee_count' => 'int32',
        'fax' => 'string',
        'industry' => 'string',
        'lead_description' => 'string',
        'lead_rating' => 'int32',
        'mobile' => 'string',
        'owner_user_id' => 'int64',
        'phone' => 'string',
        'responsible_user_id' => 'int64',
        'website' => 'string',
        'address_street' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postcode' => 'string',
        'address_country' => 'string',
        'organisation_name' => 'string',
        'customfields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lead_id' => 'LEAD_ID',
        'salutation' => 'SALUTATION',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'lead_source_id' => 'LEAD_SOURCE_ID',
        'lead_status_id' => 'LEAD_STATUS_ID',
        'title' => 'TITLE',
        'email' => 'EMAIL',
        'employee_count' => 'EMPLOYEE_COUNT',
        'fax' => 'FAX',
        'industry' => 'INDUSTRY',
        'lead_description' => 'LEAD_DESCRIPTION',
        'lead_rating' => 'LEAD_RATING',
        'mobile' => 'MOBILE',
        'owner_user_id' => 'OWNER_USER_ID',
        'phone' => 'PHONE',
        'responsible_user_id' => 'RESPONSIBLE_USER_ID',
        'website' => 'WEBSITE',
        'address_street' => 'ADDRESS_STREET',
        'address_city' => 'ADDRESS_CITY',
        'address_state' => 'ADDRESS_STATE',
        'address_postcode' => 'ADDRESS_POSTCODE',
        'address_country' => 'ADDRESS_COUNTRY',
        'organisation_name' => 'ORGANISATION_NAME',
        'customfields' => 'CUSTOMFIELDS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lead_id' => 'setLeadId',
        'salutation' => 'setSalutation',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'lead_source_id' => 'setLeadSourceId',
        'lead_status_id' => 'setLeadStatusId',
        'title' => 'setTitle',
        'email' => 'setEmail',
        'employee_count' => 'setEmployeeCount',
        'fax' => 'setFax',
        'industry' => 'setIndustry',
        'lead_description' => 'setLeadDescription',
        'lead_rating' => 'setLeadRating',
        'mobile' => 'setMobile',
        'owner_user_id' => 'setOwnerUserId',
        'phone' => 'setPhone',
        'responsible_user_id' => 'setResponsibleUserId',
        'website' => 'setWebsite',
        'address_street' => 'setAddressStreet',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_postcode' => 'setAddressPostcode',
        'address_country' => 'setAddressCountry',
        'organisation_name' => 'setOrganisationName',
        'customfields' => 'setCustomfields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lead_id' => 'getLeadId',
        'salutation' => 'getSalutation',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'lead_source_id' => 'getLeadSourceId',
        'lead_status_id' => 'getLeadStatusId',
        'title' => 'getTitle',
        'email' => 'getEmail',
        'employee_count' => 'getEmployeeCount',
        'fax' => 'getFax',
        'industry' => 'getIndustry',
        'lead_description' => 'getLeadDescription',
        'lead_rating' => 'getLeadRating',
        'mobile' => 'getMobile',
        'owner_user_id' => 'getOwnerUserId',
        'phone' => 'getPhone',
        'responsible_user_id' => 'getResponsibleUserId',
        'website' => 'getWebsite',
        'address_street' => 'getAddressStreet',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_postcode' => 'getAddressPostcode',
        'address_country' => 'getAddressCountry',
        'organisation_name' => 'getOrganisationName',
        'customfields' => 'getCustomfields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lead_id'] = isset($data['lead_id']) ? $data['lead_id'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['lead_source_id'] = isset($data['lead_source_id']) ? $data['lead_source_id'] : null;
        $this->container['lead_status_id'] = isset($data['lead_status_id']) ? $data['lead_status_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['employee_count'] = isset($data['employee_count']) ? $data['employee_count'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['lead_description'] = isset($data['lead_description']) ? $data['lead_description'] : null;
        $this->container['lead_rating'] = isset($data['lead_rating']) ? $data['lead_rating'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['responsible_user_id'] = isset($data['responsible_user_id']) ? $data['responsible_user_id'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_state'] = isset($data['address_state']) ? $data['address_state'] : null;
        $this->container['address_postcode'] = isset($data['address_postcode']) ? $data['address_postcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['organisation_name'] = isset($data['organisation_name']) ? $data['organisation_name'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lead_id'] === null) {
            $invalidProperties[] = "'lead_id' can't be null";
        }
        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) > 50)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['lead_source_id'] === null) {
            $invalidProperties[] = "'lead_source_id' can't be null";
        }
        if ($this->container['lead_status_id'] === null) {
            $invalidProperties[] = "'lead_status_id' can't be null";
        }
        if (!is_null($this->container['title']) && (strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fax']) && (strlen($this->container['fax']) > 255)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['industry']) && (strlen($this->container['industry']) > 128)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['lead_description']) && (strlen($this->container['lead_description']) > 4000)) {
            $invalidProperties[] = "invalid value for 'lead_description', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['mobile']) && (strlen($this->container['mobile']) > 255)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_street']) && (strlen($this->container['address_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_city']) && (strlen($this->container['address_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_state']) && (strlen($this->container['address_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_postcode']) && (strlen($this->container['address_postcode']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_postcode', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['address_country']) && (strlen($this->container['address_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['organisation_name']) && (strlen($this->container['organisation_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'organisation_name', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lead_id'] === null) {
            return false;
        }
        if (strlen($this->container['salutation']) > 50) {
            return false;
        }
        if (strlen($this->container['first_name']) > 255) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if (strlen($this->container['last_name']) > 255) {
            return false;
        }
        if ($this->container['lead_source_id'] === null) {
            return false;
        }
        if ($this->container['lead_status_id'] === null) {
            return false;
        }
        if (strlen($this->container['title']) > 255) {
            return false;
        }
        if (strlen($this->container['email']) > 255) {
            return false;
        }
        if (strlen($this->container['fax']) > 255) {
            return false;
        }
        if (strlen($this->container['industry']) > 128) {
            return false;
        }
        if (strlen($this->container['lead_description']) > 4000) {
            return false;
        }
        if (strlen($this->container['mobile']) > 255) {
            return false;
        }
        if (strlen($this->container['phone']) > 255) {
            return false;
        }
        if (strlen($this->container['website']) > 255) {
            return false;
        }
        if (strlen($this->container['address_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_postcode']) > 128) {
            return false;
        }
        if (strlen($this->container['address_country']) > 255) {
            return false;
        }
        if (strlen($this->container['organisation_name']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets lead_id
     *
     * @return int
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     *
     * @param int $lead_id lead_id
     *
     * @return $this
     */
    public function setLeadId($lead_id)
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        if (!is_null($salutation) && (strlen($salutation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling Lead2., must be smaller than or equal to 50.');
        }

        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets lead_source_id
     *
     * @return int
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     *
     * @param int $lead_source_id lead_source_id
     *
     * @return $this
     */
    public function setLeadSourceId($lead_source_id)
    {
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets lead_status_id
     *
     * @return int
     */
    public function getLeadStatusId()
    {
        return $this->container['lead_status_id'];
    }

    /**
     * Sets lead_status_id
     *
     * @param int $lead_status_id lead_status_id
     *
     * @return $this
     */
    public function setLeadStatusId($lead_status_id)
    {
        $this->container['lead_status_id'] = $lead_status_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employee_count
     *
     * @return int
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     *
     * @param int $employee_count employee_count
     *
     * @return $this
     */
    public function setEmployeeCount($employee_count)
    {
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        if (!is_null($fax) && (strlen($fax) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        if (!is_null($industry) && (strlen($industry) > 128)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling Lead2., must be smaller than or equal to 128.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets lead_description
     *
     * @return string
     */
    public function getLeadDescription()
    {
        return $this->container['lead_description'];
    }

    /**
     * Sets lead_description
     *
     * @param string $lead_description lead_description
     *
     * @return $this
     */
    public function setLeadDescription($lead_description)
    {
        if (!is_null($lead_description) && (strlen($lead_description) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $lead_description when calling Lead2., must be smaller than or equal to 4000.');
        }

        $this->container['lead_description'] = $lead_description;

        return $this;
    }

    /**
     * Gets lead_rating
     *
     * @return int
     */
    public function getLeadRating()
    {
        return $this->container['lead_rating'];
    }

    /**
     * Sets lead_rating
     *
     * @param int $lead_rating lead_rating
     *
     * @return $this
     */
    public function setLeadRating($lead_rating)
    {
        $this->container['lead_rating'] = $lead_rating;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        if (!is_null($mobile) && (strlen($mobile) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return int
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param int $responsible_user_id responsible_user_id
     *
     * @return $this
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        if (!is_null($address_street) && (strlen($address_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        if (!is_null($address_city) && (strlen($address_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     *
     * @return string
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     *
     * @param string $address_state address_state
     *
     * @return $this
     */
    public function setAddressState($address_state)
    {
        if (!is_null($address_state) && (strlen($address_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_state when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_postcode
     *
     * @return string
     */
    public function getAddressPostcode()
    {
        return $this->container['address_postcode'];
    }

    /**
     * Sets address_postcode
     *
     * @param string $address_postcode address_postcode
     *
     * @return $this
     */
    public function setAddressPostcode($address_postcode)
    {
        if (!is_null($address_postcode) && (strlen($address_postcode) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_postcode when calling Lead2., must be smaller than or equal to 128.');
        }

        $this->container['address_postcode'] = $address_postcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        if (!is_null($address_country) && (strlen($address_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets organisation_name
     *
     * @return string
     */
    public function getOrganisationName()
    {
        return $this->container['organisation_name'];
    }

    /**
     * Sets organisation_name
     *
     * @param string $organisation_name organisation_name
     *
     * @return $this
     */
    public function setOrganisationName($organisation_name)
    {
        if (!is_null($organisation_name) && (strlen($organisation_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $organisation_name when calling Lead2., must be smaller than or equal to 255.');
        }

        $this->container['organisation_name'] = $organisation_name;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \Swagger\Client\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


